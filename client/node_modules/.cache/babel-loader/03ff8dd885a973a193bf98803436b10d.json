{"ast":null,"code":"import { GLOBALTYPES, EditData, DeleteData } from './globalTypes';\nimport { POST_TYPES } from './postAction';\nimport { postDataAPI, patchDataAPI, deleteDataAPI } from '../../utils/fetchData';\nimport { createNotify, removeNotify } from '../actions/notifyAction';\nexport const createComment = _ref => {\n  let {\n    post,\n    newComment,\n    auth,\n    socket\n  } = _ref;\n  return async dispatch => {\n    const newPost = { ...post,\n      comments: [...post.comments, newComment]\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      const data = { ...newComment,\n        postId: post._id,\n        postUserId: post.user._id\n      };\n      const res = await postDataAPI('comment', data, auth.token);\n      const newData = { ...res.data.newComment,\n        user: auth.user\n      };\n      const newPost = { ...post,\n        comments: [...post.comments, newData]\n      };\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: newPost\n      }); // Socket\n\n      socket.emit('createComment', newPost); // Notify\n\n      const msg = {\n        id: res.data.newComment._id,\n        text: newComment.reply ? 'mentioned you in a comment.' : 'has commented on your post.',\n        recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\n        url: `/post/${post._id}`,\n        content: post.content,\n        image: post.images[0].url\n      };\n      dispatch(createNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const updateComment = _ref2 => {\n  let {\n    comment,\n    post,\n    content,\n    auth\n  } = _ref2;\n  return async dispatch => {\n    const newComments = EditData(post.comments, comment._id, { ...comment,\n      content\n    });\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      patchDataAPI(`comment/${comment._id}`, {\n        content\n      }, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const likeComment = _ref3 => {\n  let {\n    comment,\n    post,\n    auth\n  } = _ref3;\n  return async dispatch => {\n    const newComment = { ...comment,\n      likes: [...comment.likes, auth.user]\n    };\n    const newComments = EditData(post.comments, comment._id, newComment);\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unLikeComment = _ref4 => {\n  let {\n    comment,\n    post,\n    auth\n  } = _ref4;\n  return async dispatch => {\n    const newComment = { ...comment,\n      likes: DeleteData(comment.likes, auth.user._id)\n    };\n    const newComments = EditData(post.comments, comment._id, newComment);\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const deleteComment = _ref5 => {\n  let {\n    post,\n    comment,\n    auth,\n    socket\n  } = _ref5;\n  return async dispatch => {\n    const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment];\n    const newPost = { ...post,\n      comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    socket.emit('deleteComment', newPost);\n\n    try {\n      deleteArr.forEach(item => {\n        deleteDataAPI(`comment/${item._id}`, auth.token);\n        const msg = {\n          id: item._id,\n          text: comment.reply ? 'mentioned you in a comment.' : 'has commented on your post.',\n          recipients: comment.reply ? [comment.tag._id] : [post.user._id],\n          url: `/post/${post._id}`\n        };\n        dispatch(removeNotify({\n          msg,\n          auth,\n          socket\n        }));\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/csalam/Downloads/qes/client/src/redux/actions/commentAction.js"],"names":["GLOBALTYPES","EditData","DeleteData","POST_TYPES","postDataAPI","patchDataAPI","deleteDataAPI","createNotify","removeNotify","createComment","post","newComment","auth","socket","dispatch","newPost","comments","type","UPDATE_POST","payload","data","postId","_id","postUserId","user","res","token","newData","emit","msg","id","text","reply","recipients","tag","url","content","image","images","err","ALERT","error","response","updateComment","comment","newComments","likeComment","likes","unLikeComment","deleteComment","deleteArr","filter","cm","find","da","forEach","item"],"mappings":"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","sourcesContent":["import { GLOBALTYPES, EditData, DeleteData } from './globalTypes'\r\nimport { POST_TYPES } from './postAction'\r\nimport { postDataAPI, patchDataAPI, deleteDataAPI } from '../../utils/fetchData'\r\nimport { createNotify, removeNotify } from '../actions/notifyAction'\r\n\r\n\r\nexport const createComment = ({post, newComment, auth, socket}) => async (dispatch) => {\r\n    const newPost = {...post, comments: [...post.comments, newComment]}\r\n    \r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost })\r\n\r\n    try {\r\n        const data = {...newComment, postId: post._id, postUserId: post.user._id}\r\n        const res = await postDataAPI('comment', data, auth.token)\r\n\r\n        const newData = {...res.data.newComment, user: auth.user}\r\n        const newPost = {...post, comments: [...post.comments, newData]}\r\n        dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost })\r\n\r\n        // Socket\r\n        socket.emit('createComment', newPost)\r\n\r\n        // Notify\r\n        const msg = {\r\n            id: res.data.newComment._id,\r\n            text: newComment.reply ? 'mentioned you in a comment.' : 'has commented on your post.',\r\n            recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\r\n            url: `/post/${post._id}`,\r\n            content: post.content, \r\n            image: post.images[0].url\r\n        }\r\n\r\n        dispatch(createNotify({msg, auth, socket}))\r\n        \r\n    } catch (err) {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg} })\r\n    }\r\n}\r\n\r\nexport const updateComment = ({comment, post, content, auth}) => async (dispatch) => {\r\n    const newComments = EditData(post.comments, comment._id, {...comment, content})\r\n    const newPost = {...post, comments: newComments}\r\n    \r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost })\r\n    try {\r\n        patchDataAPI(`comment/${comment._id}`, { content }, auth.token)\r\n    } catch (err) {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg} })\r\n    }\r\n}\r\n\r\nexport const likeComment = ({comment, post, auth}) => async (dispatch) => {\r\n    const newComment = {...comment, likes: [...comment.likes, auth.user]}\r\n\r\n    const newComments = EditData(post.comments, comment._id, newComment)\r\n\r\n    const newPost = {...post, comments: newComments}\r\n    \r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost })\r\n\r\n    try {\r\n        await patchDataAPI(`comment/${comment._id}/like`, null, auth.token)\r\n    } catch (err) {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg} })\r\n    }\r\n}\r\n\r\nexport const unLikeComment = ({comment, post, auth}) => async (dispatch) => {\r\n\r\n    const newComment = {...comment, likes: DeleteData(comment.likes, auth.user._id)}\r\n\r\n    const newComments = EditData(post.comments, comment._id, newComment)\r\n\r\n    const newPost = {...post, comments: newComments}\r\n    \r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost })\r\n\r\n    try {\r\n        await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token)\r\n    } catch (err) {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg} })\r\n    }\r\n}\r\n\r\nexport const deleteComment = ({post, comment, auth, socket}) => async (dispatch) => {\r\n    const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment]\r\n    \r\n    const newPost = {\r\n        ...post,\r\n        comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\r\n    }\r\n\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost })\r\n\r\n    socket.emit('deleteComment', newPost)\r\n    try {\r\n       deleteArr.forEach(item => {\r\n            deleteDataAPI(`comment/${item._id}`, auth.token)\r\n\r\n            const msg = {\r\n                id: item._id,\r\n                text: comment.reply ? 'mentioned you in a comment.' : 'has commented on your post.',\r\n                recipients: comment.reply ? [comment.tag._id] : [post.user._id],\r\n                url: `/post/${post._id}`,\r\n            }\r\n    \r\n            dispatch(removeNotify({msg, auth, socket}))\r\n       })\r\n    } catch (err) {\r\n        dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg} })\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}