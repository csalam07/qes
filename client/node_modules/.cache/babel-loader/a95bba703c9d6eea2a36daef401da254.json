{"ast":null,"code":"import { GLOBALTYPES, DeleteData } from './globalTypes';\nimport { getDataAPI, patchDataAPI } from '../../utils/fetchData';\nimport { imageUpload } from '../../utils/imageUpload';\nimport { createNotify, removeNotify } from '../actions/notifyAction';\nexport const PROFILE_TYPES = {\n  LOADING: 'LOADING_PROFILE',\n  GET_USER: 'GET_PROFILE_USER',\n  FOLLOW: 'FOLLOW',\n  UNFOLLOW: 'UNFOLLOW',\n  GET_ID: 'GET_PROFILE_ID',\n  GET_POSTS: 'GET_PROFILE_POSTS',\n  UPDATE_POST: 'UPDATE_PROFILE_POST'\n};\nexport const getProfileUsers = _ref => {\n  let {\n    id,\n    auth\n  } = _ref;\n  return async dispatch => {\n    dispatch({\n      type: PROFILE_TYPES.GET_ID,\n      payload: id\n    });\n\n    try {\n      dispatch({\n        type: PROFILE_TYPES.LOADING,\n        payload: true\n      });\n      const res = getDataAPI(`/user/${id}`, auth.token);\n      const res1 = getDataAPI(`/user_posts/${id}`, auth.token);\n      const users = await res;\n      const posts = await res1;\n      dispatch({\n        type: PROFILE_TYPES.GET_USER,\n        payload: users.data\n      });\n      dispatch({\n        type: PROFILE_TYPES.GET_POSTS,\n        payload: { ...posts.data,\n          _id: id,\n          page: 2\n        }\n      });\n      dispatch({\n        type: PROFILE_TYPES.LOADING,\n        payload: false\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const updateProfileUser = _ref2 => {\n  let {\n    userData,\n    avatar,\n    auth\n  } = _ref2;\n  return async dispatch => {\n    if (!userData.fullname) return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"Please add your full name.\"\n      }\n    });\n    if (userData.fullname.length > 25) return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"Your full name too long.\"\n      }\n    });\n    if (userData.story.length > 200) return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"Your story too long.\"\n      }\n    });\n\n    try {\n      let media;\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          loading: true\n        }\n      });\n      if (avatar) media = await imageUpload([avatar]);\n      const res = await patchDataAPI(\"user\", { ...userData,\n        avatar: avatar ? media[0].url : auth.user.avatar\n      }, auth.token);\n      dispatch({\n        type: GLOBALTYPES.AUTH,\n        payload: { ...auth,\n          user: { ...auth.user,\n            ...userData,\n            avatar: avatar ? media[0].url : auth.user.avatar\n          }\n        }\n      });\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          success: res.data.msg\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const follow = _ref3 => {\n  let {\n    users,\n    user,\n    auth,\n    socket\n  } = _ref3;\n  return async dispatch => {\n    let newUser;\n\n    if (users.every(item => item._id !== user._id)) {\n      newUser = { ...user,\n        followers: [...user.followers, auth.user]\n      };\n    } else {\n      users.forEach(item => {\n        if (item._id === user._id) {\n          newUser = { ...item,\n            followers: [...item.followers, auth.user]\n          };\n        }\n      });\n    }\n\n    dispatch({\n      type: PROFILE_TYPES.FOLLOW,\n      payload: newUser\n    });\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: { ...auth,\n        user: { ...auth.user,\n          following: [...auth.user.following, newUser]\n        }\n      }\n    });\n\n    try {\n      const res = await patchDataAPI(`user/${user._id}/follow`, null, auth.token);\n      socket.emit('follow', res.data.newUser); // Notify\n\n      const msg = {\n        id: auth.user._id,\n        text: 'has started to follow you.',\n        recipients: [newUser._id],\n        url: `/profile/${auth.user._id}`\n      };\n      dispatch(createNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unfollow = _ref4 => {\n  let {\n    users,\n    user,\n    auth,\n    socket\n  } = _ref4;\n  return async dispatch => {\n    let newUser;\n\n    if (users.every(item => item._id !== user._id)) {\n      newUser = { ...user,\n        followers: DeleteData(user.followers, auth.user._id)\n      };\n    } else {\n      users.forEach(item => {\n        if (item._id === user._id) {\n          newUser = { ...item,\n            followers: DeleteData(item.followers, auth.user._id)\n          };\n        }\n      });\n    }\n\n    dispatch({\n      type: PROFILE_TYPES.UNFOLLOW,\n      payload: newUser\n    });\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: { ...auth,\n        user: { ...auth.user,\n          following: DeleteData(auth.user.following, newUser._id)\n        }\n      }\n    });\n\n    try {\n      const res = await patchDataAPI(`user/${user._id}/unfollow`, null, auth.token);\n      socket.emit('unFollow', res.data.newUser); // Notify\n\n      const msg = {\n        id: auth.user._id,\n        text: 'has started to follow you.',\n        recipients: [newUser._id],\n        url: `/profile/${auth.user._id}`\n      };\n      dispatch(removeNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/csalam/Downloads/qes/client/src/redux/actions/profileAction.js"],"names":["GLOBALTYPES","DeleteData","getDataAPI","patchDataAPI","imageUpload","createNotify","removeNotify","PROFILE_TYPES","LOADING","GET_USER","FOLLOW","UNFOLLOW","GET_ID","GET_POSTS","UPDATE_POST","getProfileUsers","id","auth","dispatch","type","payload","res","token","res1","users","posts","data","_id","page","err","ALERT","error","response","msg","updateProfileUser","userData","avatar","fullname","length","story","media","loading","url","user","AUTH","success","follow","socket","newUser","every","item","followers","forEach","following","emit","text","recipients","unfollow"],"mappings":"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","sourcesContent":["import { GLOBALTYPES, DeleteData } from './globalTypes'\r\nimport { getDataAPI, patchDataAPI } from '../../utils/fetchData'\r\nimport { imageUpload } from '../../utils/imageUpload'\r\nimport { createNotify, removeNotify } from '../actions/notifyAction'\r\n\r\n\r\nexport const PROFILE_TYPES = {\r\n    LOADING: 'LOADING_PROFILE',\r\n    GET_USER: 'GET_PROFILE_USER',\r\n    FOLLOW: 'FOLLOW',\r\n    UNFOLLOW: 'UNFOLLOW',\r\n    GET_ID: 'GET_PROFILE_ID',\r\n    GET_POSTS: 'GET_PROFILE_POSTS',\r\n    UPDATE_POST: 'UPDATE_PROFILE_POST'\r\n}\r\n\r\n\r\nexport const getProfileUsers = ({id, auth}) => async (dispatch) => {\r\n    dispatch({type: PROFILE_TYPES.GET_ID, payload: id})\r\n\r\n    try {\r\n        dispatch({type: PROFILE_TYPES.LOADING, payload: true})\r\n        const res = getDataAPI(`/user/${id}`, auth.token)\r\n        const res1 = getDataAPI(`/user_posts/${id}`, auth.token)\r\n        \r\n        const users = await res;\r\n        const posts = await res1;\r\n\r\n        dispatch({\r\n            type: PROFILE_TYPES.GET_USER,\r\n            payload: users.data\r\n        })\r\n\r\n        dispatch({\r\n            type: PROFILE_TYPES.GET_POSTS,\r\n            payload: {...posts.data, _id: id, page: 2}\r\n        })\r\n\r\n        dispatch({type: PROFILE_TYPES.LOADING, payload: false})\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: {error: err.response.data.msg}\r\n        })\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport const updateProfileUser = ({userData, avatar, auth}) => async (dispatch) => {\r\n    if(!userData.fullname)\r\n    return dispatch({type: GLOBALTYPES.ALERT, payload: {error: \"Please add your full name.\"}})\r\n\r\n    if(userData.fullname.length > 25)\r\n    return dispatch({type: GLOBALTYPES.ALERT, payload: {error: \"Your full name too long.\"}})\r\n\r\n    if(userData.story.length > 200)\r\n    return dispatch({type: GLOBALTYPES.ALERT, payload: {error: \"Your story too long.\"}})\r\n\r\n    try {\r\n        let media;\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {loading: true}})\r\n\r\n        if(avatar) media = await imageUpload([avatar])\r\n\r\n        const res = await patchDataAPI(\"user\", {\r\n            ...userData,\r\n            avatar: avatar ? media[0].url : auth.user.avatar\r\n        }, auth.token)\r\n\r\n        dispatch({\r\n            type: GLOBALTYPES.AUTH,\r\n            payload: {\r\n                ...auth,\r\n                user: {\r\n                    ...auth.user, ...userData,\r\n                    avatar: avatar ? media[0].url : auth.user.avatar,\r\n                }\r\n            }\r\n        })\r\n\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {success: res.data.msg}})\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: {error: err.response.data.msg}\r\n        })\r\n    }\r\n}\r\n\r\nexport const follow = ({users, user, auth, socket}) => async (dispatch) => {\r\n    let newUser;\r\n    \r\n    if(users.every(item => item._id !== user._id)){\r\n        newUser = {...user, followers: [...user.followers, auth.user]}\r\n    }else{\r\n        users.forEach(item => {\r\n            if(item._id === user._id){\r\n                newUser = {...item, followers: [...item.followers, auth.user]}\r\n            }\r\n        })\r\n    }\r\n\r\n    dispatch({ type: PROFILE_TYPES.FOLLOW, payload: newUser })\r\n\r\n    dispatch({\r\n        type: GLOBALTYPES.AUTH, \r\n        payload: {\r\n            ...auth,\r\n            user: {...auth.user, following: [...auth.user.following, newUser]}\r\n        }\r\n    })\r\n\r\n\r\n    try {\r\n        const res = await patchDataAPI(`user/${user._id}/follow`, null, auth.token)\r\n        socket.emit('follow', res.data.newUser)\r\n\r\n        // Notify\r\n        const msg = {\r\n            id: auth.user._id,\r\n            text: 'has started to follow you.',\r\n            recipients: [newUser._id],\r\n            url: `/profile/${auth.user._id}`,\r\n        }\r\n\r\n        dispatch(createNotify({msg, auth, socket}))\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: {error: err.response.data.msg}\r\n        })\r\n    }\r\n}\r\n\r\nexport const unfollow = ({users, user, auth, socket}) => async (dispatch) => {\r\n\r\n    let newUser;\r\n\r\n    if(users.every(item => item._id !== user._id)){\r\n        newUser = {...user, followers: DeleteData(user.followers, auth.user._id)}\r\n    }else{\r\n        users.forEach(item => {\r\n            if(item._id === user._id){\r\n                newUser = {...item, followers: DeleteData(item.followers, auth.user._id)}\r\n            }\r\n        })\r\n    }\r\n\r\n    dispatch({ type: PROFILE_TYPES.UNFOLLOW, payload: newUser })\r\n\r\n    dispatch({\r\n        type: GLOBALTYPES.AUTH, \r\n        payload: {\r\n            ...auth,\r\n            user: { \r\n                ...auth.user, \r\n                following: DeleteData(auth.user.following, newUser._id) \r\n            }\r\n        }\r\n    })\r\n   \r\n\r\n    try {\r\n        const res = await patchDataAPI(`user/${user._id}/unfollow`, null, auth.token)\r\n        socket.emit('unFollow', res.data.newUser)\r\n\r\n        // Notify\r\n        const msg = {\r\n            id: auth.user._id,\r\n            text: 'has started to follow you.',\r\n            recipients: [newUser._id],\r\n            url: `/profile/${auth.user._id}`,\r\n        }\r\n\r\n        dispatch(removeNotify({msg, auth, socket}))\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GLOBALTYPES.ALERT, \r\n            payload: {error: err.response.data.msg}\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}