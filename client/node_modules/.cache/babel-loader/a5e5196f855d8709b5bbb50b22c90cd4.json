{"ast":null,"code":"import { GLOBALTYPES, DeleteData } from '../actions/globalTypes';\nimport { postDataAPI, getDataAPI, deleteDataAPI } from '../../utils/fetchData';\nexport const MESS_TYPES = {\n  ADD_USER: 'ADD_USER',\n  ADD_MESSAGE: 'ADD_MESSAGE',\n  GET_CONVERSATIONS: 'GET_CONVERSATIONS',\n  GET_MESSAGES: 'GET_MESSAGES',\n  UPDATE_MESSAGES: 'UPDATE_MESSAGES',\n  DELETE_MESSAGES: 'DELETE_MESSAGES',\n  DELETE_CONVERSATION: 'DELETE_CONVERSATION',\n  CHECK_ONLINE_OFFLINE: 'CHECK_ONLINE_OFFLINE'\n};\nexport const addMessage = _ref => {\n  let {\n    msg,\n    auth,\n    socket\n  } = _ref;\n  return async dispatch => {\n    dispatch({\n      type: MESS_TYPES.ADD_MESSAGE,\n      payload: msg\n    });\n    const {\n      _id,\n      avatar,\n      fullname,\n      username\n    } = auth.user;\n    socket.emit('addMessage', { ...msg,\n      user: {\n        _id,\n        avatar,\n        fullname,\n        username\n      }\n    });\n\n    try {\n      await postDataAPI('message', msg, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getConversations = _ref2 => {\n  let {\n    auth,\n    page = 1\n  } = _ref2;\n  return async dispatch => {\n    try {\n      const res = await getDataAPI(`conversations?limit=${page * 9}`, auth.token);\n      let newArr = [];\n      res.data.conversations.forEach(item => {\n        item.recipients.forEach(cv => {\n          if (cv._id !== auth.user._id) {\n            newArr.push({ ...cv,\n              text: item.text,\n              media: item.media,\n              call: item.call\n            });\n          }\n        });\n      });\n      dispatch({\n        type: MESS_TYPES.GET_CONVERSATIONS,\n        payload: {\n          newArr,\n          result: res.data.result\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getMessages = _ref3 => {\n  let {\n    auth,\n    id,\n    page = 1\n  } = _ref3;\n  return async dispatch => {\n    try {\n      const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token);\n      const newData = { ...res.data,\n        messages: res.data.messages.reverse()\n      };\n      dispatch({\n        type: MESS_TYPES.GET_MESSAGES,\n        payload: { ...newData,\n          _id: id,\n          page\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const loadMoreMessages = _ref4 => {\n  let {\n    auth,\n    id,\n    page = 1\n  } = _ref4;\n  return async dispatch => {\n    try {\n      const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token);\n      const newData = { ...res.data,\n        messages: res.data.messages.reverse()\n      };\n      dispatch({\n        type: MESS_TYPES.UPDATE_MESSAGES,\n        payload: { ...newData,\n          _id: id,\n          page\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const deleteMessages = _ref5 => {\n  let {\n    msg,\n    data,\n    auth\n  } = _ref5;\n  return async dispatch => {\n    const newData = DeleteData(data, msg._id);\n    dispatch({\n      type: MESS_TYPES.DELETE_MESSAGES,\n      payload: {\n        newData,\n        _id: msg.recipient\n      }\n    });\n\n    try {\n      await deleteDataAPI(`message/${msg._id}`, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const deleteConversation = _ref6 => {\n  let {\n    auth,\n    id\n  } = _ref6;\n  return async dispatch => {\n    dispatch({\n      type: MESS_TYPES.DELETE_CONVERSATION,\n      payload: id\n    });\n\n    try {\n      await deleteDataAPI(`conversation/${id}`, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/csalam/Downloads/qes/client/src/redux/actions/messageAction.js"],"names":["GLOBALTYPES","DeleteData","postDataAPI","getDataAPI","deleteDataAPI","MESS_TYPES","ADD_USER","ADD_MESSAGE","GET_CONVERSATIONS","GET_MESSAGES","UPDATE_MESSAGES","DELETE_MESSAGES","DELETE_CONVERSATION","CHECK_ONLINE_OFFLINE","addMessage","msg","auth","socket","dispatch","type","payload","_id","avatar","fullname","username","user","emit","token","err","ALERT","error","response","data","getConversations","page","res","newArr","conversations","forEach","item","recipients","cv","push","text","media","call","result","getMessages","id","newData","messages","reverse","loadMoreMessages","deleteMessages","recipient","deleteConversation"],"mappings":"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","sourcesContent":["import { GLOBALTYPES, DeleteData } from '../actions/globalTypes'\r\nimport { postDataAPI, getDataAPI, deleteDataAPI } from '../../utils/fetchData'\r\n\r\nexport const MESS_TYPES = {\r\n    ADD_USER: 'ADD_USER',\r\n    ADD_MESSAGE: 'ADD_MESSAGE',\r\n    GET_CONVERSATIONS: 'GET_CONVERSATIONS',\r\n    GET_MESSAGES: 'GET_MESSAGES',\r\n    UPDATE_MESSAGES: 'UPDATE_MESSAGES',\r\n    DELETE_MESSAGES: 'DELETE_MESSAGES',\r\n    DELETE_CONVERSATION: 'DELETE_CONVERSATION',\r\n    CHECK_ONLINE_OFFLINE: 'CHECK_ONLINE_OFFLINE'\r\n}\r\n\r\n\r\n\r\nexport const addMessage = ({msg, auth, socket}) => async (dispatch) =>{\r\n    dispatch({type: MESS_TYPES.ADD_MESSAGE, payload: msg})\r\n\r\n    const { _id, avatar, fullname, username } = auth.user\r\n    socket.emit('addMessage', {...msg, user: { _id, avatar, fullname, username } })\r\n    \r\n    try {\r\n        await postDataAPI('message', msg, auth.token)\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const getConversations = ({auth, page = 1}) => async (dispatch) => {\r\n    try {\r\n        const res = await getDataAPI(`conversations?limit=${page * 9}`, auth.token)\r\n        \r\n        let newArr = [];\r\n        res.data.conversations.forEach(item => {\r\n            item.recipients.forEach(cv => {\r\n                if(cv._id !== auth.user._id){\r\n                    newArr.push({...cv, text: item.text, media: item.media, call: item.call})\r\n                }\r\n            })\r\n        })\r\n\r\n        dispatch({\r\n            type: MESS_TYPES.GET_CONVERSATIONS, \r\n            payload: {newArr, result: res.data.result}\r\n        })\r\n\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const getMessages = ({auth, id, page = 1}) => async (dispatch) => {\r\n    try {\r\n        const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token)\r\n        const newData = {...res.data, messages: res.data.messages.reverse()}\r\n\r\n        dispatch({type: MESS_TYPES.GET_MESSAGES, payload: {...newData, _id: id, page}})\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const loadMoreMessages = ({auth, id, page = 1}) => async (dispatch) => {\r\n    try {\r\n        const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token)\r\n        const newData = {...res.data, messages: res.data.messages.reverse()}\r\n\r\n        dispatch({type: MESS_TYPES.UPDATE_MESSAGES, payload: {...newData, _id: id, page}})\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const deleteMessages = ({msg, data, auth}) => async (dispatch) => {\r\n    const newData = DeleteData(data, msg._id)\r\n    dispatch({type: MESS_TYPES.DELETE_MESSAGES, payload: {newData, _id: msg.recipient}})\r\n    try {\r\n        await deleteDataAPI(`message/${msg._id}`, auth.token)\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\r\n    }\r\n}\r\n\r\nexport const deleteConversation = ({auth, id}) => async (dispatch) => {\r\n    dispatch({type: MESS_TYPES.DELETE_CONVERSATION, payload: id})\r\n    try {\r\n        await deleteDataAPI(`conversation/${id}`, auth.token)\r\n    } catch (err) {\r\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}