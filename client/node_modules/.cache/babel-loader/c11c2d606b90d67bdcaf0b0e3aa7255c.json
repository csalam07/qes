{"ast":null,"code":"import { GLOBALTYPES } from './globalTypes';\nimport { imageUpload } from '../../utils/imageUpload';\nimport { postDataAPI, getDataAPI, patchDataAPI, deleteDataAPI } from '../../utils/fetchData';\nimport { createNotify, removeNotify } from './notifyAction';\nexport const POST_TYPES = {\n  CREATE_POST: 'CREATE_POST',\n  LOADING_POST: 'LOADING_POST',\n  GET_POSTS: 'GET_POSTS',\n  UPDATE_POST: 'UPDATE_POST',\n  GET_POST: 'GET_POST',\n  DELETE_POST: 'DELETE_POST'\n};\nexport const createPost = _ref => {\n  let {\n    content,\n    images,\n    auth,\n    socket\n  } = _ref;\n  return async dispatch => {\n    let media = [];\n\n    try {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          loading: true\n        }\n      });\n      if (images.length > 0) media = await imageUpload(images);\n      const res = await postDataAPI('posts', {\n        content,\n        images: media\n      }, auth.token);\n      dispatch({\n        type: POST_TYPES.CREATE_POST,\n        payload: { ...res.data.newPost,\n          user: auth.user\n        }\n      });\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          loading: false\n        }\n      }); // Notify\n\n      const msg = {\n        id: res.data.newPost._id,\n        text: 'added a new post.',\n        recipients: res.data.newPost.user.followers,\n        url: `/post/${res.data.newPost._id}`,\n        content,\n        image: media[0].url\n      };\n      dispatch(createNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getPosts = token => async dispatch => {\n  try {\n    dispatch({\n      type: POST_TYPES.LOADING_POST,\n      payload: true\n    });\n    const res = await getDataAPI('posts', token);\n    dispatch({\n      type: POST_TYPES.GET_POSTS,\n      payload: { ...res.data,\n        page: 2\n      }\n    });\n    dispatch({\n      type: POST_TYPES.LOADING_POST,\n      payload: false\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updatePost = _ref2 => {\n  let {\n    content,\n    images,\n    auth,\n    status\n  } = _ref2;\n  return async dispatch => {\n    let media = [];\n    const imgNewUrl = images.filter(img => !img.url);\n    const imgOldUrl = images.filter(img => img.url);\n    if (status.content === content && imgNewUrl.length === 0 && imgOldUrl.length === status.images.length) return;\n\n    try {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          loading: true\n        }\n      });\n      if (imgNewUrl.length > 0) media = await imageUpload(imgNewUrl);\n      const res = await patchDataAPI(`post/${status._id}`, {\n        content,\n        images: [...imgOldUrl, ...media]\n      }, auth.token);\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: res.data.newPost\n      });\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          success: res.data.msg\n        }\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const likePost = _ref3 => {\n  let {\n    post,\n    auth,\n    socket\n  } = _ref3;\n  return async dispatch => {\n    const newPost = { ...post,\n      likes: [...post.likes, auth.user]\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    socket.emit('likePost', newPost);\n\n    try {\n      await patchDataAPI(`post/${post._id}/like`, null, auth.token); // Notify\n\n      const msg = {\n        id: auth.user._id,\n        text: 'like your question.',\n        recipients: [post.user._id],\n        url: `/post/${post._id}`,\n        content: post.content,\n        image: post.images[0].url\n      };\n      dispatch(createNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unLikePost = _ref4 => {\n  let {\n    post,\n    auth,\n    socket\n  } = _ref4;\n  return async dispatch => {\n    const newPost = { ...post,\n      likes: post.likes.filter(like => like._id !== auth.user._id)\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    socket.emit('unLikePost', newPost);\n\n    try {\n      await patchDataAPI(`post/${post._id}/unlike`, null, auth.token); // Notify\n\n      const msg = {\n        id: auth.user._id,\n        text: 'like your question.',\n        recipients: [post.user._id],\n        url: `/post/${post._id}`\n      };\n      dispatch(removeNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const downVote = _ref5 => {\n  let {\n    post,\n    auth,\n    socket\n  } = _ref5;\n  return async dispatch => {\n    const newPost = { ...post,\n      dislikes: [...post.dislikes, auth.user]\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    socket.emit('dislikePost', newPost);\n\n    try {\n      await patchDataAPI(`post/${post._id}/dislike`, null, auth.token); // Notify\n\n      const msg = {\n        id: auth.user._id,\n        text: 'downvote your question.',\n        recipients: [post.user._id],\n        url: `/post/${post._id}`,\n        content: post.content,\n        image: post.images[0].url\n      };\n      dispatch(createNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unDownVote = _ref6 => {\n  let {\n    post,\n    auth,\n    socket\n  } = _ref6;\n  return async dispatch => {\n    const newPost = { ...post,\n      likes: post.likes.filter(like => like._id !== auth.user._id)\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    socket.emit('unDisLikePost', newPost);\n\n    try {\n      await patchDataAPI(`post/${post._id}/undislike`, null, auth.token); // Notify\n\n      const msg = {\n        id: auth.user._id,\n        text: 'downvote your question.',\n        recipients: [post.user._id],\n        url: `/post/${post._id}`\n      };\n      dispatch(removeNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const getPost = _ref7 => {\n  let {\n    detailPost,\n    id,\n    auth\n  } = _ref7;\n  return async dispatch => {\n    if (detailPost.every(post => post._id !== id)) {\n      try {\n        const res = await getDataAPI(`post/${id}`, auth.token);\n        dispatch({\n          type: POST_TYPES.GET_POST,\n          payload: res.data.post\n        });\n      } catch (err) {\n        dispatch({\n          type: GLOBALTYPES.ALERT,\n          payload: {\n            error: err.response.data.msg\n          }\n        });\n      }\n    }\n  };\n};\nexport const deletePost = _ref8 => {\n  let {\n    post,\n    auth,\n    socket\n  } = _ref8;\n  return async dispatch => {\n    dispatch({\n      type: POST_TYPES.DELETE_POST,\n      payload: post\n    });\n\n    try {\n      const res = await deleteDataAPI(`post/${post._id}`, auth.token); // Notify\n\n      const msg = {\n        id: post._id,\n        text: 'added a new post.',\n        recipients: res.data.newPost.user.followers,\n        url: `/post/${post._id}`\n      };\n      dispatch(removeNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const savePost = _ref9 => {\n  let {\n    post,\n    auth\n  } = _ref9;\n  return async dispatch => {\n    const newUser = { ...auth.user,\n      saved: [...auth.user.saved, post._id]\n    };\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: { ...auth,\n        user: newUser\n      }\n    });\n\n    try {\n      await patchDataAPI(`savePost/${post._id}`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unSavePost = _ref10 => {\n  let {\n    post,\n    auth\n  } = _ref10;\n  return async dispatch => {\n    const newUser = { ...auth.user,\n      saved: auth.user.saved.filter(id => id !== post._id)\n    };\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: { ...auth,\n        user: newUser\n      }\n    });\n\n    try {\n      await patchDataAPI(`unSavePost/${post._id}`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/csalam/Downloads/qes/client/src/redux/actions/postAction.js"],"names":["GLOBALTYPES","imageUpload","postDataAPI","getDataAPI","patchDataAPI","deleteDataAPI","createNotify","removeNotify","POST_TYPES","CREATE_POST","LOADING_POST","GET_POSTS","UPDATE_POST","GET_POST","DELETE_POST","createPost","content","images","auth","socket","dispatch","media","type","ALERT","payload","loading","length","res","token","data","newPost","user","msg","id","_id","text","recipients","followers","url","image","err","error","response","getPosts","page","updatePost","status","imgNewUrl","filter","img","imgOldUrl","success","likePost","post","likes","emit","unLikePost","like","downVote","dislikes","unDownVote","getPost","detailPost","every","deletePost","savePost","newUser","saved","AUTH","unSavePost"],"mappings":"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","sourcesContent":["import { GLOBALTYPES } from './globalTypes';\r\nimport { imageUpload } from '../../utils/imageUpload';\r\nimport {\r\n  postDataAPI,\r\n  getDataAPI,\r\n  patchDataAPI,\r\n  deleteDataAPI,\r\n} from '../../utils/fetchData';\r\nimport { createNotify, removeNotify } from './notifyAction';\r\n\r\nexport const POST_TYPES = {\r\n  CREATE_POST: 'CREATE_POST',\r\n  LOADING_POST: 'LOADING_POST',\r\n  GET_POSTS: 'GET_POSTS',\r\n  UPDATE_POST: 'UPDATE_POST',\r\n  GET_POST: 'GET_POST',\r\n  DELETE_POST: 'DELETE_POST',\r\n};\r\n\r\nexport const createPost =\r\n  ({ content, images, auth, socket }) =>\r\n  async (dispatch) => {\r\n    let media = [];\r\n    try {\r\n      dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } });\r\n      if (images.length > 0) media = await imageUpload(images);\r\n\r\n      const res = await postDataAPI(\r\n        'posts',\r\n        { content, images: media },\r\n        auth.token,\r\n      );\r\n\r\n      dispatch({\r\n        type: POST_TYPES.CREATE_POST,\r\n        payload: { ...res.data.newPost, user: auth.user },\r\n      });\r\n\r\n      dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: false } });\r\n\r\n      // Notify\r\n      const msg = {\r\n        id: res.data.newPost._id,\r\n        text: 'added a new post.',\r\n        recipients: res.data.newPost.user.followers,\r\n        url: `/post/${res.data.newPost._id}`,\r\n        content,\r\n        image: media[0].url,\r\n      };\r\n\r\n      dispatch(createNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const getPosts = (token) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: POST_TYPES.LOADING_POST, payload: true });\r\n    const res = await getDataAPI('posts', token);\r\n\r\n    dispatch({\r\n      type: POST_TYPES.GET_POSTS,\r\n      payload: { ...res.data, page: 2 },\r\n    });\r\n\r\n    dispatch({ type: POST_TYPES.LOADING_POST, payload: false });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: { error: err.response.data.msg },\r\n    });\r\n  }\r\n};\r\n\r\nexport const updatePost =\r\n  ({ content, images, auth, status }) =>\r\n  async (dispatch) => {\r\n    let media = [];\r\n    const imgNewUrl = images.filter((img) => !img.url);\r\n    const imgOldUrl = images.filter((img) => img.url);\r\n\r\n    if (\r\n      status.content === content &&\r\n      imgNewUrl.length === 0 &&\r\n      imgOldUrl.length === status.images.length\r\n    )\r\n      return;\r\n\r\n    try {\r\n      dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } });\r\n      if (imgNewUrl.length > 0) media = await imageUpload(imgNewUrl);\r\n\r\n      const res = await patchDataAPI(\r\n        `post/${status._id}`,\r\n        {\r\n          content,\r\n          images: [...imgOldUrl, ...media],\r\n        },\r\n        auth.token,\r\n      );\r\n\r\n      dispatch({ type: POST_TYPES.UPDATE_POST, payload: res.data.newPost });\r\n\r\n      dispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const likePost =\r\n  ({ post, auth, socket }) =>\r\n  async (dispatch) => {\r\n    const newPost = { ...post, likes: [...post.likes, auth.user] };\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n    socket.emit('likePost', newPost);\r\n\r\n    try {\r\n      await patchDataAPI(`post/${post._id}/like`, null, auth.token);\r\n\r\n      // Notify\r\n      const msg = {\r\n        id: auth.user._id,\r\n        text: 'like your question.',\r\n        recipients: [post.user._id],\r\n        url: `/post/${post._id}`,\r\n        content: post.content,\r\n        image: post.images[0].url,\r\n      };\r\n\r\n      dispatch(createNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const unLikePost =\r\n  ({ post, auth, socket }) =>\r\n  async (dispatch) => {\r\n    const newPost = {\r\n      ...post,\r\n      likes: post.likes.filter((like) => like._id !== auth.user._id),\r\n    };\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n    socket.emit('unLikePost', newPost);\r\n\r\n    try {\r\n      await patchDataAPI(`post/${post._id}/unlike`, null, auth.token);\r\n\r\n      // Notify\r\n      const msg = {\r\n        id: auth.user._id,\r\n        text: 'like your question.',\r\n        recipients: [post.user._id],\r\n        url: `/post/${post._id}`,\r\n      };\r\n      dispatch(removeNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const downVote =\r\n  ({ post, auth, socket }) =>\r\n  async (dispatch) => {\r\n    const newPost = { ...post, dislikes: [...post.dislikes, auth.user] };\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n    socket.emit('dislikePost', newPost);\r\n\r\n    try {\r\n      await patchDataAPI(`post/${post._id}/dislike`, null, auth.token);\r\n\r\n      // Notify\r\n      const msg = {\r\n        id: auth.user._id,\r\n        text: 'downvote your question.',\r\n        recipients: [post.user._id],\r\n        url: `/post/${post._id}`,\r\n        content: post.content,\r\n        image: post.images[0].url,\r\n      };\r\n\r\n      dispatch(createNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const unDownVote =\r\n  ({ post, auth, socket }) =>\r\n  async (dispatch) => {\r\n    const newPost = {\r\n      ...post,\r\n      likes: post.likes.filter((like) => like._id !== auth.user._id),\r\n    };\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n    socket.emit('unDisLikePost', newPost);\r\n\r\n    try {\r\n      await patchDataAPI(`post/${post._id}/undislike`, null, auth.token);\r\n\r\n      // Notify\r\n      const msg = {\r\n        id: auth.user._id,\r\n        text: 'downvote your question.',\r\n        recipients: [post.user._id],\r\n        url: `/post/${post._id}`,\r\n      };\r\n      dispatch(removeNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const getPost =\r\n  ({ detailPost, id, auth }) =>\r\n  async (dispatch) => {\r\n    if (detailPost.every((post) => post._id !== id)) {\r\n      try {\r\n        const res = await getDataAPI(`post/${id}`, auth.token);\r\n        dispatch({ type: POST_TYPES.GET_POST, payload: res.data.post });\r\n      } catch (err) {\r\n        dispatch({\r\n          type: GLOBALTYPES.ALERT,\r\n          payload: { error: err.response.data.msg },\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\nexport const deletePost =\r\n  ({ post, auth, socket }) =>\r\n  async (dispatch) => {\r\n    dispatch({ type: POST_TYPES.DELETE_POST, payload: post });\r\n\r\n    try {\r\n      const res = await deleteDataAPI(`post/${post._id}`, auth.token);\r\n\r\n      // Notify\r\n      const msg = {\r\n        id: post._id,\r\n        text: 'added a new post.',\r\n        recipients: res.data.newPost.user.followers,\r\n        url: `/post/${post._id}`,\r\n      };\r\n      dispatch(removeNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const savePost =\r\n  ({ post, auth }) =>\r\n  async (dispatch) => {\r\n    const newUser = { ...auth.user, saved: [...auth.user.saved, post._id] };\r\n    dispatch({ type: GLOBALTYPES.AUTH, payload: { ...auth, user: newUser } });\r\n\r\n    try {\r\n      await patchDataAPI(`savePost/${post._id}`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const unSavePost =\r\n  ({ post, auth }) =>\r\n  async (dispatch) => {\r\n    const newUser = {\r\n      ...auth.user,\r\n      saved: auth.user.saved.filter((id) => id !== post._id),\r\n    };\r\n    dispatch({ type: GLOBALTYPES.AUTH, payload: { ...auth, user: newUser } });\r\n\r\n    try {\r\n      await patchDataAPI(`unSavePost/${post._id}`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}