{"ast":null,"code":"import { GLOBALTYPES, EditData, DeleteData } from './globalTypes';\nimport { POST_TYPES } from './postAction';\nimport { postDataAPI, patchDataAPI, deleteDataAPI } from '../../utils/fetchData';\nimport { createNotify, removeNotify } from '../actions/notifyAction';\nexport const createComment = _ref => {\n  let {\n    post,\n    newComment,\n    auth,\n    socket\n  } = _ref;\n  return async dispatch => {\n    const newPost = { ...post,\n      comments: [...post.comments, newComment]\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      const data = { ...newComment,\n        postId: post._id,\n        postUserId: post.user._id\n      };\n      const res = await postDataAPI('comment', data, auth.token);\n      const newData = { ...res.data.newComment,\n        user: auth.user\n      };\n      const newPost = { ...post,\n        comments: [...post.comments, newData]\n      };\n      dispatch({\n        type: POST_TYPES.UPDATE_POST,\n        payload: newPost\n      }); // Socket\n\n      socket.emit('createComment', newPost); // Notify\n\n      const msg = {\n        id: res.data.newComment._id,\n        text: newComment.reply ? 'mentioned you in a answer.' : 'has answered to your question.',\n        recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\n        url: `/post/${post._id}`,\n        content: post.content,\n        image: post.images[0].url\n      };\n      dispatch(createNotify({\n        msg,\n        auth,\n        socket\n      }));\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const updateComment = _ref2 => {\n  let {\n    comment,\n    post,\n    content,\n    auth\n  } = _ref2;\n  return async dispatch => {\n    const newComments = EditData(post.comments, comment._id, { ...comment,\n      content\n    });\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      patchDataAPI(`comment/${comment._id}`, {\n        content\n      }, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const likeComment = _ref3 => {\n  let {\n    comment,\n    post,\n    auth\n  } = _ref3;\n  return async dispatch => {\n    const newComment = { ...comment,\n      likes: [...comment.likes, auth.user]\n    };\n    const newComments = EditData(post.comments, comment._id, newComment);\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unLikeComment = _ref4 => {\n  let {\n    comment,\n    post,\n    auth\n  } = _ref4;\n  return async dispatch => {\n    const newComment = { ...comment,\n      likes: DeleteData(comment.likes, auth.user._id)\n    };\n    const newComments = EditData(post.comments, comment._id, newComment);\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const downVoteAnswer = _ref5 => {\n  let {\n    comment,\n    post,\n    auth\n  } = _ref5;\n  return async dispatch => {\n    const newComment = { ...comment,\n      dislikes: [...comment.dislikes, auth.user]\n    };\n    const newComments = EditData(post.comments, comment._id, newComment);\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}/dislike`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const unDownVoteAnswer = _ref6 => {\n  let {\n    comment,\n    post,\n    auth\n  } = _ref6;\n  return async dispatch => {\n    const newComment = { ...comment,\n      dislikes: DeleteData(comment.dislikes, auth.user._id)\n    };\n    const newComments = EditData(post.comments, comment._id, newComment);\n    const newPost = { ...post,\n      comments: newComments\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n\n    try {\n      await patchDataAPI(`comment/${comment._id}/undislike`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};\nexport const deleteComment = _ref7 => {\n  let {\n    post,\n    comment,\n    auth,\n    socket\n  } = _ref7;\n  return async dispatch => {\n    const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment];\n    const newPost = { ...post,\n      comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    });\n    socket.emit('deleteComment', newPost);\n\n    try {\n      deleteArr.forEach(item => {\n        deleteDataAPI(`comment/${item._id}`, auth.token);\n        const msg = {\n          id: item._id,\n          text: comment.reply ? 'mentioned you in a answer.' : 'has answered your question.',\n          recipients: comment.reply ? [comment.tag._id] : [post.user._id],\n          url: `/post/${post._id}`\n        };\n        dispatch(removeNotify({\n          msg,\n          auth,\n          socket\n        }));\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/csalam/Downloads/qes/client/src/redux/actions/commentAction.js"],"names":["GLOBALTYPES","EditData","DeleteData","POST_TYPES","postDataAPI","patchDataAPI","deleteDataAPI","createNotify","removeNotify","createComment","post","newComment","auth","socket","dispatch","newPost","comments","type","UPDATE_POST","payload","data","postId","_id","postUserId","user","res","token","newData","emit","msg","id","text","reply","recipients","tag","url","content","image","images","err","ALERT","error","response","updateComment","comment","newComments","likeComment","likes","unLikeComment","downVoteAnswer","dislikes","unDownVoteAnswer","deleteComment","deleteArr","filter","cm","find","da","forEach","item"],"mappings":"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","sourcesContent":["import { GLOBALTYPES, EditData, DeleteData } from './globalTypes';\r\nimport { POST_TYPES } from './postAction';\r\nimport {\r\n  postDataAPI,\r\n  patchDataAPI,\r\n  deleteDataAPI,\r\n} from '../../utils/fetchData';\r\nimport { createNotify, removeNotify } from '../actions/notifyAction';\r\n\r\nexport const createComment =\r\n  ({ post, newComment, auth, socket }) =>\r\n  async (dispatch) => {\r\n    const newPost = { ...post, comments: [...post.comments, newComment] };\r\n\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n    try {\r\n      const data = {\r\n        ...newComment,\r\n        postId: post._id,\r\n        postUserId: post.user._id,\r\n      };\r\n      const res = await postDataAPI('comment', data, auth.token);\r\n\r\n      const newData = { ...res.data.newComment, user: auth.user };\r\n      const newPost = { ...post, comments: [...post.comments, newData] };\r\n      dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n      // Socket\r\n      socket.emit('createComment', newPost);\r\n\r\n      // Notify\r\n      const msg = {\r\n        id: res.data.newComment._id,\r\n        text: newComment.reply\r\n          ? 'mentioned you in a answer.'\r\n          : 'has answered to your question.',\r\n        recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\r\n        url: `/post/${post._id}`,\r\n        content: post.content,\r\n        image: post.images[0].url,\r\n      };\r\n\r\n      dispatch(createNotify({ msg, auth, socket }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const updateComment =\r\n  ({ comment, post, content, auth }) =>\r\n  async (dispatch) => {\r\n    const newComments = EditData(post.comments, comment._id, {\r\n      ...comment,\r\n      content,\r\n    });\r\n    const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n    try {\r\n      patchDataAPI(`comment/${comment._id}`, { content }, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const likeComment =\r\n  ({ comment, post, auth }) =>\r\n  async (dispatch) => {\r\n    const newComment = { ...comment, likes: [...comment.likes, auth.user] };\r\n\r\n    const newComments = EditData(post.comments, comment._id, newComment);\r\n\r\n    const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n    try {\r\n      await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const unLikeComment =\r\n  ({ comment, post, auth }) =>\r\n  async (dispatch) => {\r\n    const newComment = {\r\n      ...comment,\r\n      likes: DeleteData(comment.likes, auth.user._id),\r\n    };\r\n\r\n    const newComments = EditData(post.comments, comment._id, newComment);\r\n\r\n    const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n    try {\r\n      await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const downVoteAnswer =\r\n  ({ comment, post, auth }) =>\r\n  async (dispatch) => {\r\n    const newComment = {\r\n      ...comment,\r\n      dislikes: [...comment.dislikes, auth.user],\r\n    };\r\n\r\n    const newComments = EditData(post.comments, comment._id, newComment);\r\n\r\n    const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n    try {\r\n      await patchDataAPI(`comment/${comment._id}/dislike`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const unDownVoteAnswer =\r\n  ({ comment, post, auth }) =>\r\n  async (dispatch) => {\r\n    const newComment = {\r\n      ...comment,\r\n      dislikes: DeleteData(comment.dislikes, auth.user._id),\r\n    };\r\n\r\n    const newComments = EditData(post.comments, comment._id, newComment);\r\n\r\n    const newPost = { ...post, comments: newComments };\r\n\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n    try {\r\n      await patchDataAPI(`comment/${comment._id}/undislike`, null, auth.token);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const deleteComment =\r\n  ({ post, comment, auth, socket }) =>\r\n  async (dispatch) => {\r\n    const deleteArr = [\r\n      ...post.comments.filter((cm) => cm.reply === comment._id),\r\n      comment,\r\n    ];\r\n\r\n    const newPost = {\r\n      ...post,\r\n      comments: post.comments.filter(\r\n        (cm) => !deleteArr.find((da) => cm._id === da._id),\r\n      ),\r\n    };\r\n\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n\r\n    socket.emit('deleteComment', newPost);\r\n    try {\r\n      deleteArr.forEach((item) => {\r\n        deleteDataAPI(`comment/${item._id}`, auth.token);\r\n\r\n        const msg = {\r\n          id: item._id,\r\n          text: comment.reply\r\n            ? 'mentioned you in a answer.'\r\n            : 'has answered your question.',\r\n          recipients: comment.reply ? [comment.tag._id] : [post.user._id],\r\n          url: `/post/${post._id}`,\r\n        };\r\n\r\n        dispatch(removeNotify({ msg, auth, socket }));\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: { error: err.response.data.msg },\r\n      });\r\n    }\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}